cmake_minimum_required(VERSION 3.16)
project(CPU_Raytracer VERSION 1.0 LANGUAGES CXX)

# C++ standard
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Default to Debug
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Debug CACHE STRING "Build type" FORCE)
endif()

# Output binary location
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Source files
set(SRC_DIR ${CMAKE_SOURCE_DIR}/CPU_Raytracer/src)
set(EXTERNAL_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/CPU_Raytracer/external/include)
set(INCLUDE_DIR ${CMAKE_SOURCE_DIR}/CPU_Raytracer/include)

file(GLOB_RECURSE SOURCES CONFIGURE_DEPENDS
    ${SRC_DIR}/*.cpp
)

# Executable
add_executable(${PROJECT_NAME} ${SOURCES})

# Include directories
target_include_directories(${PROJECT_NAME}
    PRIVATE
        ${EXTERNAL_INCLUDE_DIR}       # Adds external/include (recursive)
        ${INCLUDE_DIR}                # Adds include for our api code (recursive)
)

# Debug macro
target_compile_definitions(${PROJECT_NAME}
    PRIVATE
        $<$<CONFIG:Debug>:DEBUG_BUILD>
)

#BTW this script should work with CMake 3.16 and later versions.

#to compile to a lib, you can use the following command(s): 
#add_library(${PROJECT_NAME} STATIC ${SOURCES}) --- makes a static library (.lib, .a)
#add_library(${PROJECT_NAME} SHARED ${SOURCES}) --- makes a shared library (.dll, .so, .dylib)


